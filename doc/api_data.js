define({ "api": [  {    "type": "get",    "url": "/api/kademlia/nodes/:id",    "title": "Retrieves the k closest nodes to the specified ID.",    "name": "FindNodes",    "group": "Milestone1",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia FIND_NODE as specified in the specification.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>The address for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>The port for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>The ID for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101, id: 123}",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the node you want the k closest nodes to.</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Triple[]",            "optional": false,            "field": "array",            "description": "<p>the k closest nodes</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "    {\n    \"type\": \"nodes\",\n    \"data\": [\n        {\n            \"ip\": \"192.168.0.114\",\n            \"port\": \"3004\",\n            \"id\": \"108\"\n        }\n    ]\n}",          "type": "Triple[]"        }      ]    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone1"  },  {    "type": "get",    "url": "/api/kademlia/nodes/:id",    "title": "Retrieves the k closest nodes to the specified ID.",    "name": "FindNodes",    "group": "Milestone1",    "version": "1.0.0",    "description": "<p>Corresponds to the Kademlia FIND_NODE as specified in the specification.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>description</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101 }",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the node you want the k closest nodes to.</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Triple[]",            "optional": false,            "field": "array",            "description": "<p>the k closest nodes</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "[{ ip = \"192.168.0.102\", port = 3000, id = 101 }, { ip = \"192.168.0.102\", port = 3001, id = 155  }]",          "type": "Triple[]"        }      ]    },    "filename": "temp_for_doc/_apidoc.js",    "groupTitle": "Milestone1"  },  {    "type": "post",    "url": "/api/kademlia/ping",    "title": "Pings the node.",    "name": "Ping",    "group": "Milestone1",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia PING as specified in the specification. Returns a PONG (status 200). Puts the requester in this node's bucket.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>The address for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>The port for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>The ID for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101, id: 123}",          "type": "String"        }      ]    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone1"  },  {    "type": "post",    "url": "/api/kademlia/ping",    "title": "Pings the node.",    "name": "Ping",    "group": "Milestone1",    "version": "1.0.0",    "description": "<p>Corresponds to the Kademlia PING as specified in the specification. Returns a PONG (status 200). Puts the requester in this node's bucket.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>description</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101 }",          "type": "String"        }      ]    },    "filename": "temp_for_doc/_apidoc.js",    "groupTitle": "Milestone1"  },  {    "type": "get",    "url": "/WoT/sensors/:id",    "title": "Retrieves the current state of a given actuator",    "name": "GetActuator",    "group": "Milestone2",    "version": "1.0.0",    "description": "<p>&quot;Gets&quot; an actuator based on an index, including the pin and description</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>actuator-id</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ id: 6 }",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the actuator you want data of from</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Sensor",            "optional": false,            "field": "The",            "description": "<p>actuator-object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "{ actuator = <actuator.toString>, pin = 4, description = \"An LED\"}",          "type": "Sensor"        }      ]    },    "filename": "temp_for_doc/WoT.js",    "groupTitle": "Milestone2"  },  {    "type": "get",    "url": "/WoT/sensors/:id",    "title": "Retrieves the current state of a given sensor",    "name": "GetSensor",    "group": "Milestone2",    "version": "1.0.0",    "description": "<p>&quot;Gets&quot; a sensor based on an index, including the pin, description and latest measured value</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Sensor-id</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ id: 4 }",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The ID of the sensor you want data of from</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Sensor",            "optional": false,            "field": "The",            "description": "<p>sensor-object</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "{ sensor = <sensor.toString>, pin = 4, description = \"A temperature sensor\", latestValue = 22.06}",          "type": "Sensor"        }      ]    },    "filename": "temp_for_doc/WoT.js",    "groupTitle": "Milestone2"  },  {    "type": "post",    "url": "/WoT/actuators/:id/write",    "title": "Writes to actuator",    "name": "WriteTo",    "group": "Milestone2",    "version": "1.0.0",    "description": "<p>Writes to the actuator specified in the id of the URL</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "writeData",            "description": "<p>The data being written</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ writeData: 25 }",          "type": "String"        }      ]    },    "filename": "temp_for_doc/WoT.js",    "groupTitle": "Milestone2"  },  {    "type": "get",    "url": "/api/kademlia/value/:id",    "title": "Attempts to find the specified value iteratively through the network",    "name": "FIND_VALUE",    "group": "Milestone3",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia FIND_NODE as specified in the specification, including the iteration.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101, id: 123}",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The key intended for search</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Triple[]",            "optional": false,            "field": "array",            "description": "<p>the k closest nodes</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "{\n\"type\": \"nodes\",\n\"data\": [\n    {\n        \"ip\": \"192.168.0.114\",\n        \"port\": \"3004\",\n        \"id\": \"108\"\n    }\n]\n}",          "type": "Triple[]"        },        {          "title": "Success-Response-Example:",          "content": "{\n\"type\": \"value\",\n\"data\": \"Hello\"\n}",          "type": "Triple[]"        }      ]    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone3"  },  {    "type": "get",    "url": "/api/kademlia/value/:id",    "title": "Attempts to find the specified value locally",    "name": "FIND_VALUE",    "group": "Milestone3",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia FIND_NODE as specified in the specification, excluding the iteration.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>description</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      },      "examples": [        {          "title": "Request-Example (Headers):",          "content": "{ node_address: 192.168.0.102, node_port: 3000, node_id: 101, id: 123}",          "type": "String"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The key intended for search</p>"          }        ]      }    },    "success": {      "fields": {        "200": [          {            "group": "200",            "type": "Triple[]",            "optional": false,            "field": "array",            "description": "<p>the k closest nodes</p>"          }        ]      },      "examples": [        {          "title": "Success-Response-Example:",          "content": "{\n\"type\": \"nodes\",\n\"data\": [\n    {\n        \"ip\": \"192.168.0.114\",\n        \"port\": \"3004\",\n        \"id\": \"108\"\n    }\n]\n}",          "type": "Triple[]"        },        {          "title": "Success-Response-Example:",          "content": "{\n\"type\": \"value\",\n\"data\": \"Hello\"\n}",          "type": "Triple[]"        }      ]    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone3"  },  {    "type": "post",    "url": "/api/kademlia/storage.iterative",    "title": "",    "name": "STORE",    "group": "Milestone3",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia STORE as specified in the specification. This version is iterative, and makes STORE RPC's to the k nearest nodes.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>The address for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>The port for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>The ID for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "key",            "description": "<p>The key intended for storage</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "data",            "description": "<p>The data intended for storage</p>"          }        ]      }    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone3"  },  {    "type": "post",    "url": "/api/kademlia/storage",    "title": "",    "name": "STORE",    "group": "Milestone3",    "version": "1.0.1",    "description": "<p>Corresponds to the Kademlia STORE as specified in the specification. This version is not iterative.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_address",            "description": "<p>The address for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_port",            "description": "<p>The port for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "node_id",            "description": "<p>The ID for the contacting node, should this be specified, the triple will be updated in the bucket list</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Random RPC ID</p>"          }        ]      }    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "key",            "description": "<p>The key intended for storage</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "data",            "description": "<p>The data intended for storage</p>"          }        ]      }    },    "filename": "temp_for_doc/app.js",    "groupTitle": "Milestone3"  },  {    "type": "get",    "url": "/api/ds/HistoricalData/:id",    "title": "Get historical data",    "name": "Get_historical_data",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>Gets historical data for the specified id given by the url parameter. If the ID does not exist an exception is thrown.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>The id of the wot device that provided the data.</p>"          }        ]      }    },    "filename": "temp_for_doc/wot-ds.js",    "groupTitle": "Milestone4"  },  {    "type": "get",    "url": "/api/ds/storage/:wotId",    "title": "Get stored sensor data",    "name": "Get_stored_sensor_data",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>Gets sensor data for the given id.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "wotId",            "description": "<p>A Id for a WoT device.</p>"          }        ]      }    },    "filename": "temp_for_doc/wot-ds.js",    "groupTitle": "Milestone4"  },  {    "type": "get",    "url": "/api/ds/ping",    "title": "Ping data storage",    "name": "Ping",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>Pings this ds instance. Returns 200 if succesful.</p>",    "filename": "temp_for_doc/wot-ds.js",    "groupTitle": "Milestone4"  },  {    "type": "post",    "url": "/api/ds/register/:url",    "title": "Register WoT device",    "name": "Register_WoT_device",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>Registers a WoT device (a sensor) to the network. This find the responsible data storage node, and tells the WoT device, that it should report to that device.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "url",            "description": "<p>The url (ip + port) of the sensor you want to register.</p>"          }        ]      }    },    "filename": "temp_for_doc/wot-ds.js",    "groupTitle": "Milestone4"  },  {    "type": "post",    "url": "/wot/register",    "title": "Register data storage to WoT device",    "name": "Register_data_storage",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>Tells the WoT device which data storage device that it should report to. The parameters should be provided in a post body.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "ip",            "description": "<p>The IP of the data storage instance.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "port",            "description": "<p>The port of the data storage instance.</p>"          }        ]      }    },    "filename": "temp_for_doc/WoT.js",    "groupTitle": "Milestone4"  },  {    "type": "post",    "url": "/api/ds/storage/",    "title": "Store sensor data",    "name": "Store_sensor_data",    "group": "Milestone4",    "version": "1.0.2",    "description": "<p>This stores sensor data. Called by the WoT device (or yourself if you're trying to be a sensor). The parameters needs to be provided in a post body.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "sensorData",            "description": "<p>Sensor data that should be stored.</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "isIterative",            "description": "<p>Flag indicating if this data storage instance should store it in other data storage instances. Note: This should only be true, when /.../storage is called from the sensor.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "wotId",            "description": "<p>Id of the WoT device that the data is from.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "timestamp",            "description": "<p>Timestamp for the data. Should be Unix time (epoch).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "wotIp",            "description": "<p>Ip of the WoT device.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "wotPort",            "description": "<p>Port of the WoT device.</p>"          }        ]      }    },    "filename": "temp_for_doc/wot-ds.js",    "groupTitle": "Milestone4"  }] });
